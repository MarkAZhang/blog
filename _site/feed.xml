<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Porcelain Games Blog</title>
    <description>Porcelain Games is a small Boston-based duo that loves solving puzzles, breaking pots, and, of course, making games. Check out our debut game, &lt;a href=&#39;http://play-impulse.com&#39;&gt;Impulse&lt;/a&gt;
</description>
    <link>/blog/</link>
    <atom:link href="/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 May 2015 11:00:43 -0400</pubDate>
    <lastBuildDate>Tue, 12 May 2015 11:00:43 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>How I Fixed Up My Crufty 3 Year Old Code Base</title>
        <description>&lt;p&gt;Code refactoring is about the least exciting thing you can do for two months when you’re trying to launch a game. &lt;em&gt;Ain’t nobody got time for that, amirite?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But Impulse’s three-year-old code base, which has gone through multiple design iterations, was seriously starting to offend my sensibilities.&lt;/p&gt;

&lt;p&gt;Thus, I spent the majority of March and April paying down my technical debt. I’ll go into what I did and what I learned.&lt;/p&gt;

&lt;h3 id=&quot;brief-background&quot;&gt;Brief Background&lt;/h3&gt;

&lt;p&gt;Impulse is a tough-as-nails top-down shooter crafted for hardcore players and written entirely in HTML5. Impulse is available online &lt;a href=&quot;http://play-impulse.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/hive1_7.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I work on Impulse in my off-time with one other friend. I am employed full-time as a front-end web developer.&lt;/p&gt;

&lt;h3 id=&quot;cleaning-up-the-code-base&quot;&gt;Cleaning up the code base&lt;/h3&gt;

&lt;p&gt;Here’s what was wrong:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dead code everywhere&lt;/strong&gt; - I have a bad habit of commenting out code instead of deleting it (even though I use version control!), especially if I’m not 100% sure about cutting a feature. 90% of the time I don’t look back but I forget to delete the commented code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Confusing, multi-purpose modules&lt;/strong&gt; - I have this class called MainGameSummaryState. Originally, it just showed end-of-level stats. But then I made it handle the UI when the player saved-and-quit the game. At the time, it was the easy thing to do, and besides, the two UIs were similar and both occurred when the player left the level. But the end result was a mess. There were multiple paths into MainGameSummaryState, each of which had to be configured with various optional variables. The internals were a tangle of if-statements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Poorly organized code&lt;/strong&gt; - Sometimes it’s obvious when you should bundle logic into a class–for example for each of Impulse’s enemy types. Sometimes it’s not. At first, the active game data for a play-through was so simple, a basic object seemed to suffice. But the complexity of the data grew and grew, and at each step, it seemed easier to keep adding logic to various game-states. The result was that the logic for the game data was spread out in an unintuitive way and very hard to recall about while developing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Redundant code&lt;/strong&gt; - No matter how tempting it may be, never copy and paste logic from one file to another. Always take the time to factor it out. Otherwise, not only will your files get bogged down, but making changes will take longer because you have to change code in multiple places.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I found myself asking ‘where does this happen in the code?’ and ‘what the hell does this even do?’ far too often. Unexpected side-effects were also common. The time spent re-tracing through code and tracking down obscure bugs was substantial and made working on the game less fun.&lt;/p&gt;

&lt;p&gt;Here’s what I did to improve my code quality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Removed all the dead code&lt;/strong&gt; - It’s still all preserved in version control. I tried to remove the code in steps and be descriptive with my commit messages so I could easily find deleted code in the future. For code that I wanted to switch on and off (for example, an fps counter), I wrapped the code in a boolean flag.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Carefully split up my modules&lt;/strong&gt; - My rule of thumb was that every module should do exactly one thing. If two modules share code, factor it out into a common library or common class. I made sure I could succinctly describe what was in each utility library (and I had many). I went from about 40 files to 110, but it felt much more manageable due to the organization.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organize related code into classes&lt;/strong&gt; - For example, I created a class to hold the gameplay data and defined an API for game-states to modify it. As a result, all the logic for processing the gameplay data was in one place instead of scattered across game-states. In doing this, I also discovered many ways to simplify the code and cut down on redundancies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-quick-word-on-game-engines&quot;&gt;A quick word on game engines&lt;/h3&gt;

&lt;p&gt;I really regret not using a game engine for a project as large as Impulse. It’s fine to get your hands dirty building stuff from the ground up for a smaller project, but when you’re doing something this big, you need all the help you can get, and game engines like &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; or &lt;a href=&quot;https://phaser.io/&quot;&gt;Phaser&lt;/a&gt; perform a lot of common tasks for you. One other hidden benefit is they naturally help you organize your code, since there’s usually a ‘right’ way to plug into the engine or call its APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Research engines and frameworks when starting a project. You’ll thank yourself later.&lt;/p&gt;

&lt;h3 id=&quot;converting-to-node-style-requires&quot;&gt;Converting to node-style requires&lt;/h3&gt;

&lt;p&gt;I also decided to convert my code to use &lt;a href=&quot;https://github.com/substack/browserify-handbook#require&quot;&gt;node-style require syntax&lt;/a&gt;. Basically, this allowed me to specify what dependencies each of my files had, and also what methods in each file would be exposed to other files. &lt;/p&gt;

&lt;p&gt;Benefits included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Forced me to stomp out global variables&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Naturally improved organization of code&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Removed dependency graph issues&lt;/strong&gt; - I no longer had to worry about Javascript files loading out of order.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Access to node.js dev tools&lt;/strong&gt; - I was able to package Impulse up as a node.js package and use the many wonderful tools that the node.js community has developed. Some of the tools I’ve found particularly useful are:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;&lt;/strong&gt; - automatically walks your dependency tree and compiles all your files into a single file. Previously, I had to explicitly list all my files.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot;&gt;Uglify&lt;/a&gt;&lt;/strong&gt; - Javascript minification.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;&lt;/strong&gt; - allows you to create an automatic build pipeline by combining technologies like the two above.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://lodash.com/docs&quot;&gt;Lodash&lt;/a&gt;&lt;/strong&gt; - a Javascript utilies library that makes for cleaner code. No more for-loops!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;converting-to-the-pixi-rendering-engine&quot;&gt;Converting to the PIXI Rendering engine&lt;/h3&gt;

&lt;p&gt;Finally, I decided to convert my game to use the &lt;a href=&quot;http://www.pixijs.com/&quot;&gt;PIXI&lt;/a&gt; Rendering Engine instead of making calls directly to the Canvas API. I was reaching the performance limit of Canvas, and there were a number of visual effects I still wanted to add. &lt;/p&gt;

&lt;p&gt;Pros of PIXI:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; - PIXI provides a 2D-optimized WebGL Renderer in addition to the standard 2D one. The API is the same for both, allowing for graceful fallback.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprites are first-class objects&lt;/strong&gt; - Instead of rotating the screen to draw a rotated sprite every frame, you can just modify the rotate attribute on a sprite object and everything else is taken care of. This makes the code much cleaner.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object-oriented style&lt;/strong&gt; - Allows for better code organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of PIXI:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Conversion pains&lt;/strong&gt; - Canvas 2D is more imperative while PIXI is object-oriented. Re-architecting Impulse to handle PIXI (i.e. re-writing ALL of my pre-existing rendering code) has been quite brain-draining and time-consuming.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Graphics are not first-class objects&lt;/strong&gt; - Unlike sprites, I can’t save a Polygon object and pass it around or modify it. If I need a polygon to change every frame, I must make a Graphics object and re-draw to it every frame.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;More variables&lt;/strong&gt; - I have to save a lot of objects with PIXI so that I can modify them later. This makes the code more verbose and sometimes less readable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It’s been a long refactoring journey, but the end is finally in sight. Next up, I’m going to start working on better visual cues and effects, with the benefits of a much cleaner code-base and a more powerful rendering engine.&lt;/p&gt;

&lt;p&gt;I hope this provided you with some useful information, and I’ll be back with some juicier updates soon!&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 20:45:00 -0400</pubDate>
        <link>/blog/2015/05/04/code-quality-post-mortem.html</link>
        <guid isPermaLink="true">/blog/2015/05/04/code-quality-post-mortem.html</guid>
        
        
      </item>
    
      <item>
        <title>The Story of our First Expo</title>
        <description>&lt;p&gt;&lt;em&gt;Photos by John Chow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I ran across the Playcrafting Boston Expo online, it almost seemed too good to be true. Unlike certain &lt;a href=&quot;http://indiemegabooth.com/about/submissions/&quot;&gt;other expos&lt;/a&gt;, which can cost thousands of dollars, this one was completely free for presenters.&lt;/p&gt;

&lt;p&gt;Only one problem: it was a week away. I hurriedly wrote an e-mail to the organizer, and he got back to me the next day.&lt;/p&gt;

&lt;p&gt;By a stroke of luck, I was in.&lt;/p&gt;

&lt;p&gt;I was pumped to show off &lt;a href=&quot;http://play-impulse.com&quot;&gt;Impulse&lt;/a&gt;. But we had only a few days to prepare, and I had never exhibited a game before.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/pexpo5.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After the initial excitement wore off, I started reading &lt;a href=&quot;http://www.gamasutra.com/view/feature/4421/indie_exhibitor_lessons_learned_.php?print=1&quot;&gt;articles&lt;/a&gt; and figuring about what I wanted to get out of the expo. Here are the goals I came up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Verify that people were excited about Impulse&lt;/strong&gt; - I needed to validate my concept before devoting more time to it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Playtest&lt;/strong&gt; - this is probably the single most important thing you can get out of an expo. We made sure to nail down what questions we wanted answers, and prepared a short survey.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build some buzz around Impulse&lt;/strong&gt; - we spent quite a bit of time on marketing materials.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Talk to members of the press&lt;/strong&gt; - I e-mailed the organizer beforehand to see if I could get a press list.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Meet other developers&lt;/strong&gt; - You can get valuable tips by chatting with fellow developers. Plus, they’re cool people!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Get practice pitching my game&lt;/strong&gt; - being able to quickly sell your game is very important. Attending a small, relatively relaxed expo was excellent practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/pexpo1.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We only had a few days to get our marketing materials together, and we were starting from scratch. We wanted something memorable, and we toyed around with ideas like stickers and running a high score contest. In the end, Nichole nailed it with a slick pamphlet that folded out into a poster.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot; style=&quot;width:40%; display: inline-block;&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/poster1.jpg&quot; width=&quot;250&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;post-image-container&quot; style=&quot;width:40%; display: inline-block;&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/poster2.jpg&quot; width=&quot;250&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;We also printed out a 48 x 12 banner which we hung on the tablecloth. Overall, our expenses came out to almost $200. Printing ain’t cheap.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/pexpo3.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;For our booth we kept the layout simple with two demo stations on opposite ends of the table. We also had a monitor that mirrored one of the demos, allowing spectators to watch people play Impulse. When people weren’t playing, we would loop our &lt;a href=&quot;https://www.youtube.com/watch?v=ZkQeRA8H__E&quot;&gt;game trailer&lt;/a&gt; on the monitor.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When the big day came, I was nervous but excited. I arrived an hour early so that I would have time to set up and meet other developers before the event began (like &lt;a href=&quot;https://twitter.com/MarkefusDesolus&quot;&gt;this guy&lt;/a&gt;). This also allowed me to snag a booth in a prime location. &lt;/p&gt;

&lt;p&gt;When the attendees started coming in, the hours flew by. Happily, my booth was never empty, and at one point I even attracted a small crowd. Everyone was very friendly and kind, and the evening was wonderful. I met several game music composers from Berklee and learned that a successful Kickstarter is a great way to get your game Greenlit by Steam.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/pexpo4.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Here are some other things we learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People are generally willing to give out their e-mails. I was surprised by how easy it was. Have a sign-up sheet ready.&lt;/li&gt;
  &lt;li&gt;A lot of people will pause at your booth and look. If you don’t engage them, many of them will walk away. Prepare something to say to them beforehand. It can be as simple as ‘Hey there, do you want to try out a demo of Impulse?’&lt;/li&gt;
  &lt;li&gt;People were very diligent about filling out our play-testing surveys. It was a very valuable source of feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/pexpo2.jpg&quot; width=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Overall, the response was very positive. Most of our players got very engaged, and a couple of people even said they were ready to buy the game!&lt;/p&gt;

&lt;p&gt;Attending the expo gave us a huge motivation boost by letting us know that people were excited. We also got a ton of great feedback on our tutorial and initial difficulty curve.&lt;/p&gt;

&lt;p&gt;Thanks to Playcrafting for an awesome event. Impulse’s next appearance will be at Boston University’s &lt;em&gt;Day of the Devs&lt;/em&gt;. If you’re in the Boston area, hope to catch you there!&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Mar 2015 19:17:32 -0500</pubDate>
        <link>/blog/2015/03/03/playcrafting-expo.html</link>
        <guid isPermaLink="true">/blog/2015/03/03/playcrafting-expo.html</guid>
        
        
      </item>
    
      <item>
        <title>How a Score Multiplier can Ruin Your Game</title>
        <description>&lt;p&gt;Lately, I’ve noticed a worrying trend: new players of &lt;a href=&quot;http://play-impulse.com&quot;&gt;Impulse&lt;/a&gt; have been throwing their hands up in frustration within the first few levels. Turns out the score multiplier was to blame.&lt;/p&gt;

&lt;p&gt;I loved DDR as a kid. In particular, I loved getting full-comboes. It’s a sweet, sweet feeling to face down a 300BPM song, get pushed to your physical limit…and not make a single mistake. When I added Impulse’s score multiplier, I wanted it to feel like that.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/ddr_full_combo.png&quot; /&gt;

  &lt;div class=&quot;image-caption&quot;&gt;&lt;i&gt;Awwwwwww yeahhhhhh&lt;/i&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In Impulse, your multiplier increases whenever you kill an enemy, and resets whenever an enemy hits you. The goal is to reach a score threshold before the level gets so hard that it overwhelms you.&lt;/p&gt;

&lt;p&gt;The only way to die in Impulse is to get knocked into the Void. By penalizing the player for sloppy play, the score multiplier  makes the game that much more intense and adds another dimension of skill. Every moment, every little action, matters. Repeatedly losing your multiplier is a slow but sure death.&lt;/p&gt;

&lt;p&gt;I liked where this was going, so I went ahead and added the score multiplier. It felt AWESOME. Whenever I beat a hard level untouched, I felt like a badass.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/multiplier.png&quot; /&gt;
  &lt;div class=&quot;image-caption&quot;&gt;&lt;i&gt;Keeping a high multiplier is key to beating harder levels.&lt;/i&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But all was not well. New players were quickly giving up on my game. It took me a while to realize that the score multiplier was responsible.&lt;/p&gt;

&lt;p&gt;The gist was this: new players didn’t care about the multiplier. They were still learning the ropes, and didn’t have the mechanics down to get a high multiplier anyways. The multiplier was complicating the initial experience without any real benefit.&lt;/p&gt;

&lt;p&gt;There was an even deeper problem.&lt;/p&gt;

&lt;p&gt;I didn’t want levels to be beatable in 10 seconds, and since the multiplier could quickly send scores soaring, there was a high lower bound on the score thresholds. However, new players couldn’t keep any reasonable multiplier, so levels ended up being unreasonably long. After playing minute-long levels and dying repeatedly, players just gave up.&lt;/p&gt;

&lt;div class=&quot;post-image-container&quot;&gt;
  &lt;img src=&quot;/blog/assets/img/early_death.png&quot; /&gt;
  &lt;div class=&quot;image-caption&quot;&gt;&lt;i&gt; Impulse expects you to die a lot. Minute-long levels are unbearable.&lt;/i&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I ended up removing the multiplier for easy-mode, and introducing it as a new mechanic in hard-mode. This had several benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is less to learn at the beginning of the game.&lt;/li&gt;
  &lt;li&gt;The early levels feel shorter and their length can be carefully controlled.&lt;/li&gt;
  &lt;li&gt;There is now an additional mechanic to distinguish hard-mode from easy-mode. Hard-mode uses the same level layouts as easy-mode, and I want the modes to feel distinct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removing the multiplier has made a huge difference. Players are getting much further into the game, and they’re much more excited and engaged.&lt;/p&gt;

&lt;p&gt;Lesson learned: A score multiplier can be a great way to add intensity and an extra dimension of skill to your game, but it can also damage the experience for newer players. &lt;/p&gt;

&lt;p&gt;Hope this was helpful for other game developers who are trying to make challenging &lt;a href=&quot;https://www.youtube.com/watch?v=ea6UuRTjkKs&quot;&gt;but not punishing&lt;/a&gt; games.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Feb 2015 19:17:32 -0500</pubDate>
        <link>/blog/2015/02/27/remove-multiplier.html</link>
        <guid isPermaLink="true">/blog/2015/02/27/remove-multiplier.html</guid>
        
        
      </item>
    
      <item>
        <title>My First Experience With Feedback Friday</title>
        <description>&lt;p&gt;Feedback Friday is a weekly thread on the &lt;a href=&quot;http://www.reddit.com/r/gamedev&quot;&gt;r/gamedev&lt;/a&gt; subreddit where game developers can post their games for constructive criticism. Yesterday, I submitted &lt;a href=&quot;http://play-impulse.com&quot;&gt;Impulse&lt;/a&gt; for the first time.&lt;/p&gt;

&lt;p&gt;I confess that up to this point, I’d been working on &lt;a href=&quot;http://play-impulse.com&quot;&gt;Impulse&lt;/a&gt; in a bubble while neglecting to playtest or market. It’s a classic mistake. The great thing about forums like Feedback Friday is that they don’t require a prior online presence or fan following of any kind, which made it perfect for chumps like me. I was excited to finally start sharing my game with the outside world.&lt;/p&gt;

&lt;h3 id=&quot;posting-my-game&quot;&gt;Posting My Game&lt;/h3&gt;

&lt;p&gt;Here’s the description I posted in the thread:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/impulse_gamedev_desc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some thoughts about writing a good description:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Definitely give specific questions you want play-testers to focus on.&lt;/li&gt;
  &lt;li&gt;One thing I would change about my description is positioning my web link more prominently on a separate line and get rid of ‘playable in-browser’. Turns out with Unity Web Player, this isn’t as unique as I thought (my game is in HTML5).&lt;/li&gt;
  &lt;li&gt;My post was on the short side of the spectrum. Some people included a description of their development team, a recent changelog, controls, or even whole press releases. I went through the thread the following day and found that writing more didn’t seem to help.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heres an example of a description I found to be clean and effective:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/img/pixelia_gamedev_desc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listing key features is an efficient way to give player a rundown of your game. The contact links on the bottom add legitimacy. I’ll definitely be modeling my post after this one in the future.&lt;/p&gt;

&lt;p&gt;One last point: I posted my game at 6:00pm in the evening, which means less exposure time. Next time, I’ll be posting at midnight sharp.&lt;/p&gt;

&lt;p&gt;It was tempting to stop here and hope for the best, but that felt like a missed opportunity. The Feedback Friday thread was in ‘contest mode’, meaning posts were always shown in a random order. If I took no further action, I would be relying on random chance to get feedback for my game. I didn’t like that.&lt;/p&gt;

&lt;h3 id=&quot;going-through-the-thread&quot;&gt;Going Through the Thread&lt;/h3&gt;

&lt;p&gt;After posting my game, the next thing I did was look for games to playtest. I had a hunch that if I gave good, helpful feedback, developers would be willing to look at my game in return. In essence, the amount of feedback and exposure my game received would be directly tied to the amount of time I put into helping others. It was an idealistic notion. Classic reciprocation. I was curious if it would work.&lt;/p&gt;

&lt;p&gt;When deciding which games to play, I primarily looked at &lt;em&gt;how many comments the game had already received&lt;/em&gt;. I preferred to look at games with little or no feedback. In this way, I gave help to developers who needed it most. I also thought there was a higher chance the developer would help me in return.&lt;/p&gt;

&lt;h3 id=&quot;giving-feedback-to-other-games&quot;&gt;Giving Feedback to Other Games&lt;/h3&gt;
&lt;p&gt;There a lot of articles on giving good feedback, so I’ll just offer some tips that I found helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Read the developer instructions.&lt;/strong&gt; Make note of what feedback they’re looking for. Don’t waste your time playing parts of the game that aren’t ready. For one game, the dev asked only for testers with controllers. I missed that and spent five minutes trying to figure out how to play the game with a keyboard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give the game a serious chance.&lt;/strong&gt; Aim to spend at least 15 minutes playing each game. If you don’t understand the controls initially, keep trying. If something doesn’t work, try to work around it. If the game, god forbid, turns out to be fun, keep playing it. Developers will appreciate the attention you gave to their game.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Take detailed notes.&lt;/strong&gt; Parts of the UI you disliked. Controls or gameplay elements that confused you. Level design that frustrated you. It’s all gold to the developer. Remember that in an ideal play-testing scenario, you and the dev would be in the same room, and they would be able to watch your emotions, the mistakes you make, your thinking process, etc. Since this isn’t possible, you’ll have to make up for it by being thorough and attentive.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be constructive, not critical.&lt;/strong&gt; Your goal is to help them, not make them feel bad.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An hour into this process, I realized that I was having fun! Considering that I love playing games and thinking about game design and UX, I guess this isn’t surprising.&lt;/p&gt;

&lt;h3 id=&quot;asking-nicely-for-feedback-in-return&quot;&gt;Asking Nicely for Feedback in Return&lt;/h3&gt;

&lt;p&gt;At the end of each of my responses, I added:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hope this was helpful! If you have some spare time, my game Impulse is also on this thread, and I’d love to get your feedback.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking back, this is a very beautiful alignment of interests. I’m incentivized to write the highest quality feedback I can, in the hope that the developer I’m helping, out of gratitude, will look at my game carefully in return. Of course, this relies on the assumption that indie game developers are generally nice people, a fact I wholeheartedly believe.&lt;/p&gt;

&lt;p&gt;Even when I didn’t get a response, playing other developers’ games and looking at them critically was a great learning opportunity and a chance to see what other people were doing. This in itself made it all worthwhile.&lt;/p&gt;

&lt;h3 id=&quot;the-results&quot;&gt;The Results&lt;/h3&gt;

&lt;p&gt;I gave feedback to four games this first Feedback Friday. One of them was the guy who was only looking for controller testers, and I didn’t ask him for feedback because my reply wasn’t very helpful. To my delight, the other three &lt;em&gt;all got back to me&lt;/em&gt; in one form or another.&lt;/p&gt;

&lt;p&gt;I should note that, probably due to my late submission time, I didn’t receive any other feedback other than from the developers I helped. Had I just stopped after submitting, my game would have received no feedback at all. &lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;At my first Feedback Friday, I:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Posted my game with a succinct description and specific playtesting questions.&lt;/li&gt;
  &lt;li&gt;Played other people’s games and gave them high-quality feedback.&lt;/li&gt;
  &lt;li&gt;Requested feedback in return, and got it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I had to guess, I would say that most developers stopped at step 1. Do the smart thing, and also include steps 2 and 3.&lt;/p&gt;

&lt;p&gt;Feedback Friday definitely takes a time commitment, but the best part is that you get what you put in. As a gamer, I love it when things work out that way. I’m looking forward to participating again next Friday. I hope I’ll see you there!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Feb 2015 19:03:48 -0500</pubDate>
        <link>/blog/2015/02/20/using-reddit-gamedev.html</link>
        <guid isPermaLink="true">/blog/2015/02/20/using-reddit-gamedev.html</guid>
        
        
      </item>
    
  </channel>
</rss>
